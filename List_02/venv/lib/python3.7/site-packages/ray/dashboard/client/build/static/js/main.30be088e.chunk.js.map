{"version":3,"sources":["api.ts","pages/dashboard/LastUpdated.tsx","pages/dashboard/logical-view/Actor.tsx","pages/dashboard/logical-view/Actors.tsx","pages/dashboard/logical-view/LogicalView.tsx","common/DialogWithTitle.tsx","common/NumberedLines.tsx","pages/dashboard/node-info/dialogs/errors/Errors.tsx","pages/dashboard/node-info/dialogs/logs/Logs.tsx","common/UsageBar.tsx","pages/dashboard/node-info/features/CPU.tsx","common/formatUtils.ts","pages/dashboard/node-info/features/Disk.tsx","common/SpanButton.tsx","pages/dashboard/node-info/features/Errors.tsx","pages/dashboard/node-info/features/Host.tsx","pages/dashboard/node-info/features/Logs.tsx","pages/dashboard/node-info/features/RAM.tsx","pages/dashboard/node-info/features/Received.tsx","pages/dashboard/node-info/features/Sent.tsx","pages/dashboard/node-info/features/Uptime.tsx","pages/dashboard/node-info/features/Workers.tsx","pages/dashboard/node-info/NodeRowGroup.tsx","pages/dashboard/node-info/TotalRow.tsx","pages/dashboard/node-info/NodeInfo.tsx","pages/dashboard/state.ts","pages/dashboard/ray-config/RayConfig.tsx","pages/dashboard/tune/TuneTable.tsx","pages/dashboard/tune/TuneTensorBoard.tsx","pages/dashboard/tune/Tune.tsx","pages/dashboard/Dashboard.tsx","store.ts","App.tsx","index.tsx"],"names":["base","window","location","origin","get","path","params","a","url","URL","Object","entries","key","value","searchParams","set","fetch","toString","response","json","result","error","Error","getRayConfig","getNodeInfo","getRayletInfo","getErrors","hostname","pid","getLogs","launchProfiling","nodeId","duration","node_id","checkProfilingStatus","profilingId","profiling_id","getProfilingResultURL","encodeURIComponent","launchKillActor","actorId","actorIpAddress","actorPort","actor_id","ip_address","port","getTuneInfo","getTuneAvailability","LastUpdated","this","props","classes","lastUpdatedAt","className","root","Typography","lastUpdated","Date","toLocaleString","React","Component","connect","state","dashboard","withStyles","theme","createStyles","marginTop","spacing","color","palette","text","secondary","fontSize","textAlign","main","Actor","expanded","profiling","setExpanded","setState","handleProfilingClick","actor","startTime","now","latestResponse","checkProfilingStatusLoop","status","setTimeout","killActor","ipAddress","information","label","actorTitle","usedResources","length","sort","b","localeCompare","map","join","taskQueueLength","numExecutedTasks","numObjectIdsInScope","numLocalObjects","usedObjectStoreMemory","requiredResources","actorCustomDisplay","webuiDisplay","keys","_","__","valueEncoded","valueParsed","JSON","parse","valueRendered","inlineHTML","dangerouslySetInnerHTML","__html","title","Fragment","children","action","onClick","Math","round","href","rel","target","trim","undefined","invalidStateType","invalidStateTypeInfeasible","invalidStateTypePendingActor","datum","Collapse","in","actors","borderColor","divider","borderStyle","borderWidth","padding","primary","textDecoration","cursor","marginLeft","display","Actors","LogicalView","rayletInfo","warning","warningIcon","marginBottom","verticalAlign","DialogWithTitle","handleClose","Dialog","paper","fullWidth","maxWidth","onClose","open","scroll","IconButton","closeButton","position","right","top","zIndex","borderBottomColor","borderBottomStyle","borderBottomWidth","lineHeight","paddingBottom","NumberedLines","lines","Table","TableBody","line","index","TableRow","TableCell","classNames","cell","lineNumber","data-line-number","overflowX","fontFamily","paddingRight","width","content","whiteSpace","Errors","clearErrorDialog","errors","header","message","timestamp","split","backgroundColor","fade","borderLeftColor","borderLeftStyle","borderLeftWidth","Logs","clearLogDialog","log","UsageBar","percent","max","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","min","gradient","inner","style","background","paddingLeft","ClusterCPU","cpuWeightedAverage","input","totalWeightTimesValue","totalWeight","weight","getWeightedAverage","nodes","node","cpus","cpu","minWidth","toFixed","NodeCPU","WorkerCPU","worker","cpu_percent","formatByteAmount","amount","unit","pow","formatUsage","used","total","usedFormatted","totalFormatted","formatDuration","durationInSeconds","durationSeconds","floor","durationMinutes","durationHours","durationDays","pad","padStart","ClusterDisk","disk","NodeDisk","WorkerDisk","component","variant","SpanButton","otherProps","button","makeClusterErrors","errorCounts","totalErrorCount","ip","makeNodeErrors","setErrorDialog","makeWorkerErrors","perWorker","ClusterHost","NodeHost","WorkerHost","cmdline","makeClusterLogs","logCounts","totalLogCount","makeNodeLogs","setLogDialog","makeWorkerLogs","ClusterRAM","mem","NodeRAM","WorkerRAM","memory_info","rss","ClusterReceived","totalReceived","net","NodeReceived","WorkerReceived","ClusterSent","totalSent","NodeSent","WorkerSent","getUptime","bootTime","ClusterUptime","NodeUptime","boot_time","WorkerUptime","create_time","ClusterWorkers","totalWorkers","totalCpus","workers","NodeWorkers","WorkerWorkers","NodeRowGroup","initialExpanded","toggleExpand","raylet","features","NodeFeature","WorkerFeature","hover","expandCollapseCell","expandCollapseIcon","extraInfo","colSpan","TotalRow","ClusterFeature","totalIcon","borderTopColor","borderTopStyle","borderTopWidth","NodeInfo","logDialog","errorDialog","nodeInfo","clients","client","log_counts","count","error_counts","table","TableHead","slice","createSlice","name","initialState","tab","rayConfig","tuneInfo","tuneAvailability","reducers","setTab","payload","setRayConfig","setNodeAndRayletInfo","setTuneInfo","setTuneAvailability","setError","dashboardActions","actions","dashboardReducer","reducer","mapDispatchToProps","RayConfig","refreshRayConfig","formattedRayConfig","autoscaling_mode","head_type","worker_type","min_workers","initial_workers","max_workers","idle_timeout_minutes","paddingTop","TuneTable","timeout","sortedColumn","ascending","metricParamColumn","onColumnClick","column","humanize","str","part","charAt","toUpperCase","sortedCell","chosenMetricParam","active","TableSortLabel","direction","sortedTrialRecords","trialDetails","values","getAttribute","trial","firstTrial","paramsDict","paramNames","filter","k","metricNames","TuneTensorBoard","src","board","height","border","Tune","tabIndex","refreshTuneInfo","handleTabChange","event","clearTimeout","tabs","SelectedComponent","Tabs","indicatorColor","onChange","textColor","Tab","Dashboard","timeoutId","refreshNodeAndRayletInfo","Promise","all","splice","store","configureStore","devTools","process","App","CssBaseline","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30be088e.chunk.js","sourcesContent":["const base =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8265\"\n    : window.location.origin;\n\n// TODO(mitchellstern): Add JSON schema validation for the responses.\nconst get = async <T>(path: string, params: { [key: string]: any }) => {\n  const url = new URL(path, base);\n  for (const [key, value] of Object.entries(params)) {\n    url.searchParams.set(key, value);\n  }\n\n  const response = await fetch(url.toString());\n  const json = await response.json();\n\n  const { result, error } = json;\n\n  if (error !== null) {\n    throw Error(error);\n  }\n\n  return result as T;\n};\n\nexport type RayConfigResponse = {\n  min_workers: number;\n  max_workers: number;\n  initial_workers: number;\n  autoscaling_mode: string;\n  idle_timeout_minutes: number;\n  head_type: string;\n  worker_type: string;\n};\n\nexport const getRayConfig = () => get<RayConfigResponse>(\"/api/ray_config\", {});\n\nexport type NodeInfoResponse = {\n  clients: Array<{\n    now: number;\n    hostname: string;\n    ip: string;\n    boot_time: number; // System boot time expressed in seconds since epoch\n    cpu: number; // System-wide CPU utilization expressed as a percentage\n    cpus: [number, number]; // Number of logical CPUs and physical CPUs\n    mem: [number, number, number]; // Total, available, and used percentage of memory\n    disk: {\n      [path: string]: {\n        total: number;\n        free: number;\n        used: number;\n        percent: number;\n      };\n    };\n    load_avg: [[number, number, number], [number, number, number]];\n    net: [number, number]; // Sent and received network traffic in bytes / second\n    workers: Array<{\n      pid: number;\n      create_time: number;\n      cmdline: string[];\n      cpu_percent: number;\n      cpu_times: {\n        system: number;\n        children_system: number;\n        user: number;\n        children_user: number;\n      };\n      memory_info: {\n        pageins: number;\n        pfaults: number;\n        vms: number;\n        rss: number;\n      };\n    }>;\n  }>;\n  log_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n  error_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n};\n\nexport const getNodeInfo = () => get<NodeInfoResponse>(\"/api/node_info\", {});\n\nexport type RayletInfoResponse = {\n  nodes: {\n    [ip: string]: {\n      extraInfo?: string;\n      workersStats: {\n        pid: number;\n        isDriver?: boolean;\n      }[];\n    };\n  };\n  actors: {\n    [actorId: string]:\n      | {\n          actorId: string;\n          actorTitle: string;\n          averageTaskExecutionSpeed: number;\n          children: RayletInfoResponse[\"actors\"];\n          // currentTaskFuncDesc: string[];\n          ipAddress: string;\n          isDirectCall: boolean;\n          jobId: string;\n          nodeId: string;\n          numExecutedTasks: number;\n          numLocalObjects: number;\n          numObjectIdsInScope: number;\n          pid: number;\n          port: number;\n          state: 0 | 1 | 2;\n          taskQueueLength: number;\n          timestamp: number;\n          usedObjectStoreMemory: number;\n          usedResources: { [key: string]: number };\n          currentTaskDesc?: string;\n          numPendingTasks?: number;\n          webuiDisplay?: Record<string, string>;\n        }\n      | {\n          actorId: string;\n          actorTitle: string;\n          requiredResources: { [key: string]: number };\n          state: -1;\n          invalidStateType?: \"infeasibleActor\" | \"pendingActor\";\n        };\n  };\n};\n\nexport const getRayletInfo = () =>\n  get<RayletInfoResponse>(\"/api/raylet_info\", {});\n\nexport type ErrorsResponse = {\n  [pid: string]: Array<{\n    message: string;\n    timestamp: number;\n    type: string;\n  }>;\n};\n\nexport const getErrors = (hostname: string, pid: number | null) =>\n  get<ErrorsResponse>(\"/api/errors\", {\n    hostname,\n    pid: pid === null ? \"\" : pid,\n  });\n\nexport type LogsResponse = {\n  [pid: string]: string[];\n};\n\nexport const getLogs = (hostname: string, pid: number | null) =>\n  get<LogsResponse>(\"/api/logs\", {\n    hostname,\n    pid: pid === null ? \"\" : pid,\n  });\n\nexport type LaunchProfilingResponse = string;\n\nexport const launchProfiling = (\n  nodeId: string,\n  pid: number,\n  duration: number,\n) =>\n  get<LaunchProfilingResponse>(\"/api/launch_profiling\", {\n    node_id: nodeId,\n    pid: pid,\n    duration: duration,\n  });\n\nexport type CheckProfilingStatusResponse =\n  | { status: \"pending\" }\n  | { status: \"finished\" }\n  | { status: \"error\"; error: string };\n\nexport const checkProfilingStatus = (profilingId: string) =>\n  get<CheckProfilingStatusResponse>(\"/api/check_profiling_status\", {\n    profiling_id: profilingId,\n  });\n\nexport const getProfilingResultURL = (profilingId: string) =>\n  `${base}/speedscope/index.html#profileURL=${encodeURIComponent(\n    `${base}/api/get_profiling_info?profiling_id=${profilingId}`,\n  )}`;\n\nexport const launchKillActor = (\n  actorId: string,\n  actorIpAddress: string,\n  actorPort: number,\n) =>\n  get<string>(\"/api/kill_actor\", {\n    actor_id: actorId,\n    ip_address: actorIpAddress,\n    port: actorPort,\n  });\n\nexport type TuneTrial = {\n  date: string;\n  episodes_total: string;\n  experiment_id: string;\n  experiment_tag: string;\n  hostname: string;\n  iterations_since_restore: number;\n  logdir: string;\n  node_ip: string;\n  pid: number;\n  time_since_restore: number;\n  time_this_iter_s: number;\n  time_total_s: number;\n  timestamp: number;\n  timesteps_since_restore: number;\n  timesteps_total: number;\n  training_iteration: number;\n  start_time: string;\n  status: string;\n  trial_id: string;\n  job_id: string;\n  params: { [key: string]: string | number };\n  metrics: { [key: string]: string | number };\n};\n\nexport type TuneJobResponse = {\n  trial_records: { [key: string]: TuneTrial };\n};\n\nexport const getTuneInfo = () => get<TuneJobResponse>(\"/api/tune_info\", {});\n\nexport type TuneAvailabilityResponse = {\n  available: boolean;\n};\n\nexport const getTuneAvailability = () =>\n  get<TuneAvailabilityResponse>(\"/api/tune_availability\", {});\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(2),\n    },\n    lastUpdated: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n    error: {\n      color: theme.palette.error.main,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  lastUpdatedAt: state.dashboard.lastUpdatedAt,\n  error: state.dashboard.error,\n});\n\nclass LastUpdated extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, lastUpdatedAt, error } = this.props;\n    return (\n      <div className={classes.root}>\n        {lastUpdatedAt !== null && (\n          <Typography className={classes.lastUpdated}>\n            Last updated: {new Date(lastUpdatedAt).toLocaleString()}\n          </Typography>\n        )}\n        {error !== null && (\n          <Typography className={classes.error}>{error}</Typography>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LastUpdated));\n","import {\n  Collapse,\n  createStyles,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {\n  checkProfilingStatus,\n  CheckProfilingStatusResponse,\n  getProfilingResultURL,\n  launchKillActor,\n  launchProfiling,\n  RayletInfoResponse,\n} from \"../../../api\";\nimport Actors from \"./Actors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      marginTop: theme.spacing(2),\n      padding: theme.spacing(2),\n    },\n    title: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.75rem\",\n    },\n    action: {\n      color: theme.palette.primary.main,\n      textDecoration: \"none\",\n      \"&:hover\": {\n        cursor: \"pointer\",\n      },\n    },\n    invalidStateTypeInfeasible: {\n      color: theme.palette.error.main,\n    },\n    invalidStateTypePendingActor: {\n      color: theme.palette.secondary.main,\n    },\n    information: {\n      fontSize: \"0.875rem\",\n    },\n    datum: {\n      \"&:not(:first-child)\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n    webuiDisplay: {\n      fontSize: \"0.875rem\",\n    },\n    inlineHTML: {\n      fontSize: \"0.875rem\",\n      display: \"inline\",\n    },\n  });\n\ntype Props = {\n  actor: RayletInfoResponse[\"actors\"][keyof RayletInfoResponse[\"actors\"]];\n};\n\ntype State = {\n  expanded: boolean;\n  profiling: {\n    [profilingId: string]: {\n      startTime: number;\n      latestResponse: CheckProfilingStatusResponse | null;\n    };\n  };\n};\n\nclass Actor extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    expanded: true,\n    profiling: {},\n  };\n\n  setExpanded = (expanded: boolean) => () => {\n    this.setState({ expanded });\n  };\n\n  handleProfilingClick = (duration: number) => async () => {\n    const actor = this.props.actor;\n    if (actor.state !== -1) {\n      const profilingId = await launchProfiling(\n        actor.nodeId,\n        actor.pid,\n        duration,\n      );\n      this.setState((state) => ({\n        profiling: {\n          ...state.profiling,\n          [profilingId]: { startTime: Date.now(), latestResponse: null },\n        },\n      }));\n      const checkProfilingStatusLoop = async () => {\n        const response = await checkProfilingStatus(profilingId);\n        this.setState((state) => ({\n          profiling: {\n            ...state.profiling,\n            [profilingId]: {\n              ...state.profiling[profilingId],\n              latestResponse: response,\n            },\n          },\n        }));\n        if (response.status === \"pending\") {\n          setTimeout(checkProfilingStatusLoop, 1000);\n        }\n      };\n      await checkProfilingStatusLoop();\n    }\n  };\n\n  killActor = () => {\n    const actor = this.props.actor;\n    if (actor.state === 0) {\n      launchKillActor(actor.actorId, actor.ipAddress, actor.port);\n    }\n  };\n\n  render() {\n    const { classes, actor } = this.props;\n    const { expanded, profiling } = this.state;\n\n    const information =\n      actor.state !== -1\n        ? [\n            {\n              label: \"ActorTitle\",\n              value: actor.actorTitle,\n            },\n            {\n              label: \"State\",\n              value: actor.state.toLocaleString(),\n            },\n            {\n              label: \"Resources\",\n              value:\n                Object.entries(actor.usedResources).length > 0 &&\n                Object.entries(actor.usedResources)\n                  .sort((a, b) => a[0].localeCompare(b[0]))\n                  .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n                  .join(\", \"),\n            },\n            {\n              label: \"Pending\",\n              value: actor.taskQueueLength.toLocaleString(),\n            },\n            {\n              label: \"Executed\",\n              value: actor.numExecutedTasks.toLocaleString(),\n            },\n            {\n              label: \"NumObjectIdsInScope\",\n              value: actor.numObjectIdsInScope.toLocaleString(),\n            },\n            {\n              label: \"NumLocalObjects\",\n              value: actor.numLocalObjects.toLocaleString(),\n            },\n            {\n              label: \"UsedLocalObjectMemory\",\n              value: actor.usedObjectStoreMemory.toLocaleString(),\n            },\n            // {\n            //   label: \"Task\",\n            //   value: actor.currentTaskFuncDesc.join(\".\")\n            // }\n          ]\n        : [\n            {\n              label: \"ID\",\n              value: actor.actorId,\n            },\n            {\n              label: \"Required resources\",\n              value:\n                Object.entries(actor.requiredResources).length > 0 &&\n                Object.entries(actor.requiredResources)\n                  .sort((a, b) => a[0].localeCompare(b[0]))\n                  .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n                  .join(\", \"),\n            },\n          ];\n\n    // Construct the custom message from the actor.\n    let actorCustomDisplay: JSX.Element[] = [];\n    if (actor.state !== -1 && actor.webuiDisplay) {\n      actorCustomDisplay = Object.keys(actor.webuiDisplay)\n        .sort()\n        .map((key, _, __) => {\n          // Construct the value from actor.\n          // Please refer to worker.py::show_in_webui for schema.\n          const valueEncoded = actor.webuiDisplay![key];\n          const valueParsed = JSON.parse(valueEncoded);\n          let valueRendered = valueParsed[\"message\"];\n          if (valueParsed[\"dtype\"] === \"html\") {\n            valueRendered = (\n              <div\n                className={classes.inlineHTML}\n                dangerouslySetInnerHTML={{ __html: valueRendered }}\n              ></div>\n            );\n          }\n\n          if (key === \"\") {\n            return (\n              <Typography className={classes.webuiDisplay}>\n                &nbsp; &nbsp; {valueRendered}\n              </Typography>\n            );\n          } else {\n            return (\n              <Typography className={classes.webuiDisplay}>\n                &nbsp; &nbsp; {key}: {valueRendered}\n              </Typography>\n            );\n          }\n        });\n    }\n\n    return (\n      <div className={classes.root}>\n        <Typography className={classes.title}>\n          {actor.state !== -1 ? (\n            <React.Fragment>\n              Actor {actor.actorId}{\" \"}\n              {Object.entries(actor.children).length > 0 && (\n                <React.Fragment>\n                  (\n                  <span\n                    className={classes.action}\n                    onClick={this.setExpanded(!expanded)}\n                  >\n                    {expanded ? \"Collapse\" : \"Expand\"}\n                  </span>\n                  )\n                </React.Fragment>\n              )}{\" \"}\n              (Profile for\n              {[10, 30, 60].map((duration) => (\n                <React.Fragment>\n                  {\" \"}\n                  <span\n                    className={classes.action}\n                    onClick={this.handleProfilingClick(duration)}\n                  >\n                    {duration}s\n                  </span>\n                </React.Fragment>\n              ))}\n              ){\" \"}\n              {actor.state === 0 ? (\n                <span className={classes.action} onClick={this.killActor}>\n                  Kill Actor\n                </span>\n              ) : (\n                \"\"\n              )}\n              {Object.entries(profiling).map(\n                ([profilingId, { startTime, latestResponse }]) =>\n                  latestResponse !== null && (\n                    <React.Fragment>\n                      (\n                      {latestResponse.status === \"pending\" ? (\n                        `Profiling for ${Math.round(\n                          (Date.now() - startTime) / 1000,\n                        )}s...`\n                      ) : latestResponse.status === \"finished\" ? (\n                        <a\n                          className={classes.action}\n                          href={getProfilingResultURL(profilingId)}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          Profiling result\n                        </a>\n                      ) : latestResponse.status === \"error\" ? (\n                        `Profiling error: ${latestResponse.error.trim()}`\n                      ) : undefined}\n                      ){\" \"}\n                    </React.Fragment>\n                  ),\n              )}\n            </React.Fragment>\n          ) : actor.invalidStateType === \"infeasibleActor\" ? (\n            <span className={classes.invalidStateTypeInfeasible}>\n              {actor.actorTitle} is infeasible. (This actor cannot be created\n              because the Ray cluster cannot satisfy its resource requirements.)\n            </span>\n          ) : (\n            <span className={classes.invalidStateTypePendingActor}>\n              {actor.actorTitle} is pending until resources are available.\n            </span>\n          )}\n        </Typography>\n        <Typography className={classes.information}>\n          {information.map(\n            ({ label, value }) =>\n              value &&\n              value.length > 0 && (\n                <React.Fragment key={label}>\n                  <span className={classes.datum}>\n                    {label}: {value}\n                  </span>{\" \"}\n                </React.Fragment>\n              ),\n          )}\n        </Typography>\n        {actor.state !== -1 && (\n          <React.Fragment>\n            {actorCustomDisplay.length > 0 && (\n              <React.Fragment>{actorCustomDisplay}</React.Fragment>\n            )}\n\n            <Collapse in={expanded}>\n              <Actors actors={actor.children} />\n            </Collapse>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Actor);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RayletInfoResponse } from \"../../../api\";\nimport Actor from \"./Actor\";\n\nconst styles = (theme: Theme) => createStyles({});\n\ntype Props = {\n  actors: RayletInfoResponse[\"actors\"];\n};\n\nclass Actors extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { actors } = this.props;\n    return Object.entries(actors).map(([actorId, actor]) => (\n      <Actor actor={actor} key={actorId} />\n    ));\n  }\n}\n\nexport default withStyles(styles)(Actors);\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport WarningRoundedIcon from \"@material-ui/icons/WarningRounded\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\nimport Actors from \"./Actors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warning: {\n      fontSize: \"0.8125rem\",\n      marginBottom: theme.spacing(2),\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayletInfo: state.dashboard.rayletInfo,\n});\n\nclass LogicalView extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, rayletInfo } = this.props;\n    return (\n      <div>\n        <Typography className={classes.warning} color=\"textSecondary\">\n          <WarningRoundedIcon className={classes.warningIcon} /> Note: This tab\n          is experimental.\n        </Typography>\n        {rayletInfo === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : Object.entries(rayletInfo.actors).length === 0 ? (\n          <Typography color=\"textSecondary\">No actors found.</Typography>\n        ) : (\n          <Actors actors={rayletInfo.actors} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LogicalView));\n","import {\n  createStyles,\n  Dialog,\n  IconButton,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1,\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n  });\n\ntype Props = {\n  handleClose: () => void;\n  title: string;\n};\n\nclass DialogWithTitle extends React.Component<\n  Props & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, handleClose, title } = this.props;\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>{title}</Typography>\n        {this.props.children}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(DialogWithTitle);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\",\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0,\n      },\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\",\n      },\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\",\n    },\n  });\n\ntype Props = {\n  lines: string[];\n};\n\nclass NumberedLines extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberedLines);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { ErrorsResponse, getErrors } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    error: {\n      backgroundColor: fade(theme.palette.error.main, 0.04),\n      borderLeftColor: theme.palette.error.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      marginTop: theme.spacing(3),\n      padding: theme.spacing(2),\n    },\n    timestamp: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  clearErrorDialog: () => void;\n  hostname: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: ErrorsResponse | null;\n  error: string | null;\n};\n\nclass Errors extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { hostname, pid } = this.props;\n      const result = await getErrors(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearErrorDialog, hostname } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearErrorDialog} title=\"Errors\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, errors]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {errors.length > 0 ? (\n                errors.map(({ message, timestamp }, index) => (\n                  <div className={classes.error} key={index}>\n                    <Typography className={classes.timestamp}>\n                      Error at {new Date(timestamp * 1000).toLocaleString()}\n                    </Typography>\n                    <NumberedLines lines={message.trim().split(\"\\n\")} />\n                  </div>\n                ))\n              ) : (\n                <Typography color=\"textSecondary\">No errors found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Errors);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { getLogs, LogsResponse } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    log: {\n      backgroundColor: fade(theme.palette.primary.main, 0.04),\n      borderLeftColor: theme.palette.primary.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      padding: theme.spacing(2),\n    },\n  });\n\ntype Props = {\n  clearLogDialog: () => void;\n  hostname: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: LogsResponse | null;\n  error: string | null;\n};\n\nclass Logs extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { hostname, pid } = this.props;\n      const result = await getLogs(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearLogDialog, hostname } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearLogDialog} title=\"Logs\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, lines]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {lines.length > 0 ? (\n                <div className={classes.log}>\n                  <NumberedLines lines={lines} />\n                </div>\n              ) : (\n                <Typography color=\"textSecondary\">No logs found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logs);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number,\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio,\n];\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n    },\n    inner: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  percent: number;\n  text: string;\n};\n\nclass UsageBar extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, text } = this.props;\n\n    let { percent } = this.props;\n    percent = Math.max(percent, 0);\n    percent = Math.min(percent, 100);\n\n    const minColor = [0, 255, 0];\n    const maxColor = [255, 0, 0];\n\n    const leftColor = minColor;\n    const rightColor = blend(minColor, maxColor, percent / 100);\n    const alpha = 0.2;\n\n    const gradient = `\n      linear-gradient(\n        to right,\n        rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n        rgba(${rightColor.join(\",\")}, ${alpha}) ${percent}%,\n        transparent ${percent}%\n      )\n    `;\n\n    // Use a nested `div` here because the right border is affected by the\n    // gradient background otherwise.\n    return (\n      <div className={classes.root}>\n        <div className={classes.inner} style={{ background: gradient }}>\n          {text}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(UsageBar);\n","import React from \"react\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst getWeightedAverage = (\n  input: {\n    weight: number;\n    value: number;\n  }[],\n) => {\n  if (input.length === 0) {\n    return 0;\n  }\n\n  let totalWeightTimesValue = 0;\n  let totalWeight = 0;\n  for (const { weight, value } of input) {\n    totalWeightTimesValue += weight * value;\n    totalWeight += weight;\n  }\n  return totalWeightTimesValue / totalWeight;\n};\n\nexport const ClusterCPU: ClusterFeatureComponent = ({ nodes }) => {\n  const cpuWeightedAverage = getWeightedAverage(\n    nodes.map((node) => ({ weight: node.cpus[0], value: node.cpu })),\n  );\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={cpuWeightedAverage}\n        text={`${cpuWeightedAverage.toFixed(1)}%`}\n      />\n    </div>\n  );\n};\n\nexport const NodeCPU: NodeFeatureComponent = ({ node }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar percent={node.cpu} text={`${node.cpu.toFixed(1)}%`} />\n  </div>\n);\n\nexport const WorkerCPU: WorkerFeatureComponent = ({ worker }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar\n      percent={worker.cpu_percent}\n      text={`${worker.cpu_percent.toFixed(1)}%`}\n    />\n  </div>\n);\n","export const formatByteAmount = (\n  amount: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nexport const formatUsage = (\n  used: number,\n  total: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) => {\n  const usedFormatted = formatByteAmount(used, unit);\n  const totalFormatted = formatByteAmount(total, unit);\n  const percent = (100 * used) / total;\n  return `${usedFormatted} / ${totalFormatted} (${percent.toFixed(0)}%)`;\n};\n\nexport const formatDuration = (durationInSeconds: number) => {\n  const durationSeconds = Math.floor(durationInSeconds) % 60;\n  const durationMinutes = Math.floor(durationInSeconds / 60) % 60;\n  const durationHours = Math.floor(durationInSeconds / 60 / 60) % 24;\n  const durationDays = Math.floor(durationInSeconds / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    durationDays ? `${durationDays}d` : \"\",\n    `${pad(durationHours)}h`,\n    `${pad(durationMinutes)}m`,\n    `${pad(durationSeconds)}s`,\n  ].join(\" \");\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterDisk: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.disk[\"/\"].used;\n    total += node.disk[\"/\"].total;\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeDisk: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * node.disk[\"/\"].used) / node.disk[\"/\"].total}\n    text={formatUsage(node.disk[\"/\"].used, node.disk[\"/\"].total, \"gibibyte\")}\n  />\n);\n\nexport const WorkerDisk: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React, { HTMLAttributes } from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      color: theme.palette.primary.main,\n      \"&:hover\": {\n        cursor: \"pointer\",\n        textDecoration: \"underline\",\n      },\n    },\n  });\n\nclass SpanButton extends React.Component<\n  HTMLAttributes<HTMLSpanElement> & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, ...otherProps } = this.props;\n    return <span className={classes.button} {...otherProps} />;\n  }\n}\n\nexport default withStyles(styles)(SpanButton);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const makeClusterErrors = (errorCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalErrorCount = 0;\n  for (const node of nodes) {\n    if (node.ip in errorCounts) {\n      totalErrorCount += errorCounts[node.ip].total;\n    }\n  }\n  return totalErrorCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalErrorCount.toLocaleString()}{\" \"}\n      {totalErrorCount === 1 ? \"error\" : \"errors\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeErrors = (\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setErrorDialog: (hostname: string, pid: number | null) => void,\n): NodeFeatureComponent => ({ node }) =>\n  errorCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setErrorDialog(node.hostname, null)}>\n      View all errors ({errorCounts.total.toLocaleString()})\n    </SpanButton>\n  );\n\nexport const makeWorkerErrors = (\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setErrorDialog: (hostname: string, pid: number | null) => void,\n): WorkerFeatureComponent => ({ node, worker }) =>\n  errorCounts.perWorker[worker.pid] === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setErrorDialog(node.hostname, worker.pid)}>\n      View errors ({errorCounts.perWorker[worker.pid].toLocaleString()})\n    </SpanButton>\n  );\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterHost: ClusterFeatureComponent = ({ nodes }) => (\n  <React.Fragment>\n    Totals ({nodes.length.toLocaleString()}{\" \"}\n    {nodes.length === 1 ? \"host\" : \"hosts\"})\n  </React.Fragment>\n);\n\nexport const NodeHost: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>\n    {node.hostname} ({node.ip})\n  </React.Fragment>\n);\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// first portion here for display in the \"Host\" column. Note that this will\n// always be `ray` under the current setup, but it may vary in the future.\nexport const WorkerHost: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {worker.cmdline[0].split(\"::\", 2)[0]} (PID: {worker.pid})\n  </React.Fragment>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const makeClusterLogs = (logCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalLogCount = 0;\n  for (const node of nodes) {\n    if (node.ip in logCounts) {\n      totalLogCount += logCounts[node.ip].total;\n    }\n  }\n  return totalLogCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalLogCount.toLocaleString()} {totalLogCount === 1 ? \"line\" : \"lines\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeLogs = (\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setLogDialog: (hostname: string, pid: number | null) => void,\n): NodeFeatureComponent => ({ node }) =>\n  logCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setLogDialog(node.hostname, null)}>\n      View all logs ({logCounts.total.toLocaleString()}{\" \"}\n      {logCounts.total === 1 ? \"line\" : \"lines\"})\n    </SpanButton>\n  );\n\nexport const makeWorkerLogs = (\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setLogDialog: (hostname: string, pid: number | null) => void,\n): WorkerFeatureComponent => ({ node, worker }) =>\n  logCounts.perWorker[worker.pid] === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setLogDialog(node.hostname, worker.pid)}>\n      View log ({logCounts.perWorker[worker.pid].toLocaleString()}{\" \"}\n      {logCounts.perWorker[worker.pid] === 1 ? \"line\" : \"lines\"})\n    </SpanButton>\n  );\n","import React from \"react\";\nimport { formatByteAmount, formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterRAM: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.mem[0] - node.mem[1];\n    total += node.mem[0];\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeRAM: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * (node.mem[0] - node.mem[1])) / node.mem[0]}\n    text={formatUsage(node.mem[0] - node.mem[1], node.mem[0], \"gibibyte\")}\n  />\n);\n\nexport const WorkerRAM: WorkerFeatureComponent = ({ node, worker }) => (\n  <UsageBar\n    percent={(100 * worker.memory_info.rss) / node.mem[0]}\n    text={formatByteAmount(worker.memory_info.rss, \"mebibyte\")}\n  />\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterReceived: ClusterFeatureComponent = ({ nodes }) => {\n  let totalReceived = 0;\n  for (const node of nodes) {\n    totalReceived += node.net[1];\n  }\n  return (\n    <React.Fragment>\n      {formatByteAmount(totalReceived, \"mebibyte\")}/s\n    </React.Fragment>\n  );\n};\n\nexport const NodeReceived: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[1], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerReceived: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterSent: ClusterFeatureComponent = ({ nodes }) => {\n  let totalSent = 0;\n  for (const node of nodes) {\n    totalSent += node.net[0];\n  }\n  return (\n    <React.Fragment>{formatByteAmount(totalSent, \"mebibyte\")}/s</React.Fragment>\n  );\n};\n\nexport const NodeSent: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[0], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerSent: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatDuration } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst getUptime = (bootTime: number) => Date.now() / 1000 - bootTime;\n\nexport const ClusterUptime: ClusterFeatureComponent = ({ nodes }) => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nexport const NodeUptime: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatDuration(getUptime(node.boot_time))}</React.Fragment>\n);\n\nexport const WorkerUptime: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {formatDuration(getUptime(worker.create_time))}\n  </React.Fragment>\n);\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterWorkers: ClusterFeatureComponent = ({ nodes }) => {\n  let totalWorkers = 0;\n  let totalCpus = 0;\n  for (const node of nodes) {\n    totalWorkers += node.workers.length;\n    totalCpus += node.cpus[0];\n  }\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {totalCpus.toLocaleString()}{\" \"}\n      {totalCpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\nexport const NodeWorkers: NodeFeatureComponent = ({ node }) => {\n  const workers = node.workers.length;\n  const cpus = node.cpus[0];\n  return (\n    <React.Fragment>\n      {workers.toLocaleString()} {workers === 1 ? \"worker\" : \"workers\"} /{\" \"}\n      {cpus.toLocaleString()} {cpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// second portion here for display in the \"Workers\" column.\nexport const WorkerWorkers: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>{worker.cmdline[0].split(\"::\", 2)[1]}</React.Fragment>\n);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { NodeInfoResponse, RayletInfoResponse } from \"../../../api\";\nimport { NodeCPU, WorkerCPU } from \"./features/CPU\";\nimport { NodeDisk, WorkerDisk } from \"./features/Disk\";\nimport { makeNodeErrors, makeWorkerErrors } from \"./features/Errors\";\nimport { NodeHost, WorkerHost } from \"./features/Host\";\nimport { makeNodeLogs, makeWorkerLogs } from \"./features/Logs\";\nimport { NodeRAM, WorkerRAM } from \"./features/RAM\";\nimport { NodeReceived, WorkerReceived } from \"./features/Received\";\nimport { NodeSent, WorkerSent } from \"./features/Sent\";\nimport { NodeUptime, WorkerUptime } from \"./features/Uptime\";\nimport { NodeWorkers, WorkerWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\",\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    extraInfo: {\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      whiteSpace: \"pre\",\n    },\n  });\n\ntype ArrayType<T> = T extends Array<infer U> ? U : never;\ntype Node = ArrayType<NodeInfoResponse[\"clients\"]>;\n\ntype Props = {\n  node: Node;\n  raylet: RayletInfoResponse[\"nodes\"][keyof RayletInfoResponse[\"nodes\"]] | null;\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  setLogDialog: (hostname: string, pid: number | null) => void;\n  setErrorDialog: (hostname: string, pid: number | null) => void;\n  initialExpanded: boolean;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nclass NodeRowGroup extends React.Component<\n  Props & WithStyles<typeof styles>,\n  State\n> {\n  state: State = {\n    expanded: this.props.initialExpanded,\n  };\n\n  toggleExpand = () => {\n    this.setState((state) => ({\n      expanded: !state.expanded,\n    }));\n  };\n\n  render() {\n    const {\n      classes,\n      node,\n      raylet,\n      logCounts,\n      errorCounts,\n      setLogDialog,\n      setErrorDialog,\n    } = this.props;\n    const { expanded } = this.state;\n\n    const features = [\n      { NodeFeature: NodeHost, WorkerFeature: WorkerHost },\n      { NodeFeature: NodeWorkers, WorkerFeature: WorkerWorkers },\n      { NodeFeature: NodeUptime, WorkerFeature: WorkerUptime },\n      { NodeFeature: NodeCPU, WorkerFeature: WorkerCPU },\n      { NodeFeature: NodeRAM, WorkerFeature: WorkerRAM },\n      { NodeFeature: NodeDisk, WorkerFeature: WorkerDisk },\n      { NodeFeature: NodeSent, WorkerFeature: WorkerSent },\n      { NodeFeature: NodeReceived, WorkerFeature: WorkerReceived },\n      {\n        NodeFeature: makeNodeLogs(logCounts, setLogDialog),\n        WorkerFeature: makeWorkerLogs(logCounts, setLogDialog),\n      },\n      {\n        NodeFeature: makeNodeErrors(errorCounts, setErrorDialog),\n        WorkerFeature: makeWorkerErrors(errorCounts, setErrorDialog),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <TableRow hover>\n          <TableCell\n            className={classNames(classes.cell, classes.expandCollapseCell)}\n            onClick={this.toggleExpand}\n          >\n            {!expanded ? (\n              <AddIcon className={classes.expandCollapseIcon} />\n            ) : (\n              <RemoveIcon className={classes.expandCollapseIcon} />\n            )}\n          </TableCell>\n          {features.map(({ NodeFeature }, index) => (\n            <TableCell className={classes.cell} key={index}>\n              <NodeFeature node={node} />\n            </TableCell>\n          ))}\n        </TableRow>\n        {expanded && (\n          <React.Fragment>\n            {raylet !== null && raylet.extraInfo !== undefined && (\n              <TableRow hover>\n                <TableCell className={classes.cell} />\n                <TableCell\n                  className={classNames(classes.cell, classes.extraInfo)}\n                  colSpan={features.length}\n                >\n                  {raylet.extraInfo}\n                </TableCell>\n              </TableRow>\n            )}\n            {node.workers.map((worker, index: number) => (\n              <TableRow hover key={index}>\n                <TableCell className={classes.cell} />\n                {features.map(({ WorkerFeature }, index) => (\n                  <TableCell className={classes.cell} key={index}>\n                    <WorkerFeature node={node} worker={worker} />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(NodeRowGroup);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport React from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { ClusterCPU } from \"./features/CPU\";\nimport { ClusterDisk } from \"./features/Disk\";\nimport { makeClusterErrors } from \"./features/Errors\";\nimport { ClusterHost } from \"./features/Host\";\nimport { makeClusterLogs } from \"./features/Logs\";\nimport { ClusterRAM } from \"./features/RAM\";\nimport { ClusterReceived } from \"./features/Received\";\nimport { ClusterSent } from \"./features/Sent\";\nimport { ClusterUptime } from \"./features/Uptime\";\nimport { ClusterWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      borderTopColor: theme.palette.divider,\n      borderTopStyle: \"solid\",\n      borderTopWidth: 2,\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    totalIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n  });\n\ntype Props = {\n  nodes: NodeInfoResponse[\"clients\"];\n  logCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n  errorCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n};\n\nclass TotalRow extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, nodes, logCounts, errorCounts } = this.props;\n\n    const features = [\n      { ClusterFeature: ClusterHost },\n      { ClusterFeature: ClusterWorkers },\n      { ClusterFeature: ClusterUptime },\n      { ClusterFeature: ClusterCPU },\n      { ClusterFeature: ClusterRAM },\n      { ClusterFeature: ClusterDisk },\n      { ClusterFeature: ClusterSent },\n      { ClusterFeature: ClusterReceived },\n      { ClusterFeature: makeClusterLogs(logCounts) },\n      { ClusterFeature: makeClusterErrors(errorCounts) },\n    ];\n\n    return (\n      <TableRow hover>\n        <TableCell className={classes.cell}>\n          <LayersIcon className={classes.totalIcon} />\n        </TableCell>\n        {features.map(({ ClusterFeature }, index) => (\n          <TableCell className={classes.cell} key={index}>\n            <ClusterFeature nodes={nodes} />\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n}\n\nexport default withStyles(styles)(TotalRow);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\nimport Errors from \"./dialogs/errors/Errors\";\nimport Logs from \"./dialogs/logs/Logs\";\nimport NodeRowGroup from \"./NodeRowGroup\";\nimport TotalRow from \"./TotalRow\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  nodeInfo: state.dashboard.nodeInfo,\n  rayletInfo: state.dashboard.rayletInfo,\n});\n\ntype State = {\n  logDialog: { hostname: string; pid: number | null } | null;\n  errorDialog: { hostname: string; pid: number | null } | null;\n};\n\nclass NodeInfo extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  state: State = {\n    logDialog: null,\n    errorDialog: null,\n  };\n\n  setLogDialog = (hostname: string, pid: number | null) => {\n    this.setState({ logDialog: { hostname, pid } });\n  };\n\n  clearLogDialog = () => {\n    this.setState({ logDialog: null });\n  };\n\n  setErrorDialog = (hostname: string, pid: number | null) => {\n    this.setState({ errorDialog: { hostname, pid } });\n  };\n\n  clearErrorDialog = () => {\n    this.setState({ errorDialog: null });\n  };\n\n  render() {\n    const { classes, nodeInfo, rayletInfo } = this.props;\n    const { logDialog, errorDialog } = this.state;\n\n    if (nodeInfo === null || rayletInfo === null) {\n      return <Typography color=\"textSecondary\">Loading...</Typography>;\n    }\n\n    const logCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    const errorCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    for (const client of nodeInfo.clients) {\n      logCounts[client.ip] = { perWorker: {}, total: 0 };\n      errorCounts[client.ip] = { perWorker: {}, total: 0 };\n      for (const worker of client.workers) {\n        logCounts[client.ip].perWorker[worker.pid] = 0;\n        errorCounts[client.ip].perWorker[worker.pid] = 0;\n      }\n    }\n\n    for (const ip of Object.keys(nodeInfo.log_counts)) {\n      if (ip in logCounts) {\n        for (const [pid, count] of Object.entries(nodeInfo.log_counts[ip])) {\n          logCounts[ip].perWorker[pid] = count;\n          logCounts[ip].total += count;\n        }\n      }\n    }\n\n    for (const ip of Object.keys(nodeInfo.error_counts)) {\n      if (ip in errorCounts) {\n        for (const [pid, count] of Object.entries(nodeInfo.error_counts[ip])) {\n          errorCounts[ip].perWorker[pid] = count;\n          errorCounts[ip].total += count;\n        }\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} />\n              <TableCell className={classes.cell}>Host</TableCell>\n              <TableCell className={classes.cell}>Workers</TableCell>\n              <TableCell className={classes.cell}>Uptime</TableCell>\n              <TableCell className={classes.cell}>CPU</TableCell>\n              <TableCell className={classes.cell}>RAM</TableCell>\n              <TableCell className={classes.cell}>Disk</TableCell>\n              <TableCell className={classes.cell}>Sent</TableCell>\n              <TableCell className={classes.cell}>Received</TableCell>\n              <TableCell className={classes.cell}>Logs</TableCell>\n              <TableCell className={classes.cell}>Errors</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {nodeInfo.clients.map((client) => (\n              <NodeRowGroup\n                key={client.ip}\n                node={client}\n                raylet={\n                  client.ip in rayletInfo.nodes\n                    ? rayletInfo.nodes[client.ip]\n                    : null\n                }\n                logCounts={logCounts[client.ip]}\n                errorCounts={errorCounts[client.ip]}\n                setLogDialog={this.setLogDialog}\n                setErrorDialog={this.setErrorDialog}\n                initialExpanded={nodeInfo.clients.length <= 1}\n              />\n            ))}\n            <TotalRow\n              nodes={nodeInfo.clients}\n              logCounts={logCounts}\n              errorCounts={errorCounts}\n            />\n          </TableBody>\n        </Table>\n        {logDialog !== null && (\n          <Logs\n            clearLogDialog={this.clearLogDialog}\n            hostname={logDialog.hostname}\n            pid={logDialog.pid}\n          />\n        )}\n        {errorDialog !== null && (\n          <Errors\n            clearErrorDialog={this.clearErrorDialog}\n            hostname={errorDialog.hostname}\n            pid={errorDialog.pid}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(NodeInfo));\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  NodeInfoResponse,\n  RayConfigResponse,\n  RayletInfoResponse,\n  TuneAvailabilityResponse,\n  TuneJobResponse,\n} from \"../../api\";\n\nconst name = \"dashboard\";\n\ntype State = {\n  tab: number;\n  rayConfig: RayConfigResponse | null;\n  nodeInfo: NodeInfoResponse | null;\n  rayletInfo: RayletInfoResponse | null;\n  tuneInfo: TuneJobResponse | null;\n  tuneAvailability: boolean;\n  lastUpdatedAt: number | null;\n  error: string | null;\n};\n\nconst initialState: State = {\n  tab: 0,\n  rayConfig: null,\n  nodeInfo: null,\n  rayletInfo: null,\n  tuneInfo: null,\n  tuneAvailability: false,\n  lastUpdatedAt: null,\n  error: null,\n};\n\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setTab: (state, action: PayloadAction<number>) => {\n      state.tab = action.payload;\n    },\n    setRayConfig: (state, action: PayloadAction<RayConfigResponse>) => {\n      state.rayConfig = action.payload;\n    },\n    setNodeAndRayletInfo: (\n      state,\n      action: PayloadAction<{\n        nodeInfo: NodeInfoResponse;\n        rayletInfo: RayletInfoResponse;\n      }>,\n    ) => {\n      state.nodeInfo = action.payload.nodeInfo;\n      state.rayletInfo = action.payload.rayletInfo;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneInfo: (state, action: PayloadAction<TuneJobResponse>) => {\n      state.tuneInfo = action.payload;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneAvailability: (\n      state,\n      action: PayloadAction<{\n        tuneAvailability: TuneAvailabilityResponse;\n      }>,\n    ) => {\n      const tuneAvailability =\n        action.payload.tuneAvailability === null\n          ? false\n          : action.payload.tuneAvailability[\"available\"];\n      state.tuneAvailability = tuneAvailability;\n      state.lastUpdatedAt = Date.now();\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const dashboardActions = slice.actions;\nexport const dashboardReducer = slice.reducer;\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRayConfig } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n      width: \"auto\",\n    },\n    cell: {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(3),\n      },\n    },\n    key: {\n      color: theme.palette.text.secondary,\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayConfig: state.dashboard.rayConfig,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass RayConfig extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  refreshRayConfig = async () => {\n    try {\n      const rayConfig = await getRayConfig();\n      this.props.setRayConfig(rayConfig);\n    } catch (error) {\n    } finally {\n      setTimeout(this.refreshRayConfig, 10 * 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshRayConfig();\n  }\n\n  render() {\n    const { classes, rayConfig } = this.props;\n\n    if (rayConfig === null) {\n      return (\n        <Typography color=\"textSecondary\">\n          No Ray configuration detected.\n        </Typography>\n      );\n    }\n\n    const formattedRayConfig = [\n      {\n        key: \"Autoscaling mode\",\n        value: rayConfig.autoscaling_mode,\n      },\n      {\n        key: \"Head node type\",\n        value: rayConfig.head_type,\n      },\n      {\n        key: \"Worker node type\",\n        value: rayConfig.worker_type,\n      },\n      {\n        key: \"Min worker nodes\",\n        value: rayConfig.min_workers,\n      },\n      {\n        key: \"Initial worker nodes\",\n        value: rayConfig.initial_workers,\n      },\n      {\n        key: \"Max worker nodes\",\n        value: rayConfig.max_workers,\n      },\n      {\n        key: \"Idle timeout\",\n        value: `${rayConfig.idle_timeout_minutes} ${\n          rayConfig.idle_timeout_minutes === 1 ? \"minute\" : \"minutes\"\n        }`,\n      },\n    ];\n\n    return (\n      <div>\n        <Typography>Ray cluster configuration:</Typography>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>Setting</TableCell>\n              <TableCell className={classes.cell}>Value</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {formattedRayConfig.map(({ key, value }, index) => (\n              <TableRow key={index}>\n                <TableCell className={classNames(classes.cell, classes.key)}>\n                  {key}\n                </TableCell>\n                <TableCell className={classes.cell}>{value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(RayConfig));\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TuneTrial } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2),\n      },\n    },\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"right\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  metricParamColumn: string;\n  ascending: boolean;\n  sortedColumn: keyof TuneTrial | undefined;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTable extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    sortedColumn: undefined,\n    ascending: true,\n    metricParamColumn: \"\",\n  };\n\n  onColumnClick = (column: keyof TuneTrial, metricParamColumn?: string) => {\n    let ascending = this.state.ascending;\n    if (column === this.state.sortedColumn) {\n      ascending = !ascending;\n    } else {\n      ascending = true;\n    }\n    this.setState({\n      sortedColumn: column,\n      ascending: ascending,\n    });\n\n    if (metricParamColumn) {\n      this.setState({\n        metricParamColumn: metricParamColumn,\n      });\n    }\n  };\n\n  /**\n   * Replaces all underscores with spaces and capitalizes all words\n   * in str\n   */\n  humanize = (str: string) =>\n    str\n      .split(\"_\")\n      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n      .join(\" \");\n\n  sortedCell = (name: keyof TuneTrial, chosenMetricParam?: string) => {\n    const { tuneInfo, classes } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n    let label: \"desc\" | \"asc\" = \"asc\";\n\n    if (name === sortedColumn && !ascending) {\n      label = \"desc\";\n    }\n\n    if (tuneInfo === null) {\n      return;\n    }\n\n    let onClick = () => this.onColumnClick(name);\n    if (chosenMetricParam) {\n      onClick = () => this.onColumnClick(name, chosenMetricParam);\n    }\n\n    let active = false;\n    let key: string = name;\n    if (chosenMetricParam) {\n      key = chosenMetricParam;\n      active = chosenMetricParam === metricParamColumn && sortedColumn === name;\n    } else {\n      active = name === sortedColumn;\n    }\n\n    return (\n      <TableCell className={classes.cell} key={key} onClick={onClick}>\n        <TableSortLabel active={active} direction={label} />\n        {chosenMetricParam\n          ? this.humanize(chosenMetricParam)\n          : this.humanize(name)}\n      </TableCell>\n    );\n  };\n\n  sortedTrialRecords = () => {\n    const { tuneInfo } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n\n    if (\n      tuneInfo === null ||\n      Object.keys(tuneInfo[\"trial_records\"]).length === 0\n    ) {\n      return null;\n    }\n\n    const trialDetails = Object.values(tuneInfo[\"trial_records\"]);\n\n    if (!sortedColumn) {\n      return trialDetails;\n    }\n\n    let getAttribute = (trial: TuneTrial) => trial[sortedColumn!];\n    if (sortedColumn === \"metrics\" || sortedColumn === \"params\") {\n      getAttribute = (trial: TuneTrial) =>\n        trial[sortedColumn!][metricParamColumn];\n    }\n\n    if (sortedColumn) {\n      if (ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) > getAttribute(b) ? 1 : -1,\n        );\n      } else if (!ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) < getAttribute(b) ? 1 : -1,\n        );\n      }\n    }\n\n    return trialDetails;\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    if (\n      tuneInfo === null ||\n      Object.keys(tuneInfo[\"trial_records\"]).length === 0\n    ) {\n      return null;\n    }\n\n    const firstTrial = Object.keys(tuneInfo[\"trial_records\"])[0];\n    const paramsDict = tuneInfo[\"trial_records\"][firstTrial][\"params\"];\n    const paramNames = Object.keys(paramsDict).filter((k) => k !== \"args\");\n\n    const metricNames = Object.keys(\n      tuneInfo[\"trial_records\"][firstTrial][\"metrics\"],\n    );\n\n    const trialDetails = this.sortedTrialRecords();\n\n    return (\n      <div className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              {this.sortedCell(\"trial_id\")}\n              {this.sortedCell(\"job_id\")}\n              {this.sortedCell(\"start_time\")}\n              {paramNames.map((value) => this.sortedCell(\"params\", value))}\n              {this.sortedCell(\"status\")}\n              {metricNames.map((value) => this.sortedCell(\"metrics\", value))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {trialDetails !== null &&\n              trialDetails.map((trial, index) => (\n                <TableRow key={index}>\n                  <TableCell className={classes.cell}>\n                    {trial[\"trial_id\"]}\n                  </TableCell>\n                  <TableCell className={classes.cell}>\n                    {trial[\"job_id\"]}\n                  </TableCell>\n                  <TableCell className={classes.cell}>\n                    {trial[\"start_time\"]}\n                  </TableCell>\n                  {paramNames.map((value) => (\n                    <TableCell className={classes.cell} key={value}>\n                      {trial[\"params\"][value]}\n                    </TableCell>\n                  ))}\n                  <TableCell className={classes.cell}>\n                    {trial[\"status\"]}\n                  </TableCell>\n                  {trial[\"metrics\"] &&\n                    metricNames.map((value) => (\n                      <TableCell className={classes.cell} key={value}>\n                        {trial[\"metrics\"][value]}\n                      </TableCell>\n                    ))}\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTable));\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    board: {\n      width: \"100%\",\n      height: \"1000px\",\n      border: \"none\",\n    },\n    warning: {\n      fontSize: \"0.8125rem\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  error: state.dashboard.error,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTensorBoard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  render() {\n    const { classes, error } = this.props;\n\n    return (\n      <div className={classes.root}>\n        {error === \"TypeError: Failed to fetch\" && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            Warning: Tensorboard server closed. View Tensorboard by running\n            \"tensorboard --logdir\" if not displaying below.\n          </Typography>\n        )}\n        <iframe\n          src=\"http://localhost:6006/\"\n          className={classes.board}\n          title=\"TensorBoard\"\n        ></iframe>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTensorBoard));\n","import {\n  createStyles,\n  Tab,\n  Tabs,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport WarningRoundedIcon from \"@material-ui/icons/WarningRounded\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTuneInfo } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport TuneTable from \"./TuneTable\";\nimport TuneTensorBoard from \"./TuneTensorBoard\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n    warning: {\n      fontSize: \"0.8125rem\",\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  tabIndex: number;\n};\n\nclass Tune extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    tabIndex: 0,\n  };\n\n  refreshTuneInfo = async () => {\n    try {\n      const tuneInfo = await getTuneInfo();\n      this.props.setTuneInfo(tuneInfo);\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeout = window.setTimeout(this.refreshTuneInfo, 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshTuneInfo();\n  }\n\n  async componentWillUnmount() {\n    window.clearTimeout(this.timeout);\n  }\n\n  handleTabChange = (event: React.ChangeEvent<{}>, value: number) => {\n    this.setState({\n      tabIndex: value,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    const { tabIndex } = this.state;\n\n    const tabs = [\n      { label: \"Table\", component: TuneTable },\n      { label: \"TensorBoard\", component: TuneTensorBoard },\n    ];\n\n    const SelectedComponent = tabs[tabIndex].component;\n    return (\n      <div className={classes.root}>\n        <Typography className={classes.warning} color=\"textSecondary\">\n          <WarningRoundedIcon className={classes.warningIcon} /> Note: This tab\n          is experimental.\n        </Typography>\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tabIndex}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Tune));\n","import {\n  createStyles,\n  Tab,\n  Tabs,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getNodeInfo, getRayletInfo, getTuneAvailability } from \"../../api\";\nimport { StoreState } from \"../../store\";\nimport LastUpdated from \"./LastUpdated\";\nimport LogicalView from \"./logical-view/LogicalView\";\nimport NodeInfo from \"./node-info/NodeInfo\";\nimport RayConfig from \"./ray-config/RayConfig\";\nimport { dashboardActions } from \"./state\";\nimport Tune from \"./tune/Tune\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tab: state.dashboard.tab,\n  tuneAvailability: state.dashboard.tuneAvailability,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass Dashboard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  timeoutId = 0;\n\n  refreshNodeAndRayletInfo = async () => {\n    try {\n      const [nodeInfo, rayletInfo, tuneAvailability] = await Promise.all([\n        getNodeInfo(),\n        getRayletInfo(),\n        getTuneAvailability(),\n      ]);\n      this.props.setNodeAndRayletInfo({ nodeInfo, rayletInfo });\n      this.props.setTuneAvailability({ tuneAvailability });\n      this.props.setError(null);\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeoutId = window.setTimeout(this.refreshNodeAndRayletInfo, 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshNodeAndRayletInfo();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n  }\n\n  handleTabChange = (event: React.ChangeEvent<{}>, value: number) => {\n    this.props.setTab(value);\n  };\n\n  render() {\n    const { classes, tab, tuneAvailability } = this.props;\n    const tabs = [\n      { label: \"Machine view\", component: NodeInfo },\n      { label: \"Logical view\", component: LogicalView },\n      { label: \"Ray config\", component: RayConfig },\n      { label: \"Tune\", component: Tune },\n    ];\n\n    // if Tune information is not available, remove Tune tab from the dashboard\n    if (!tuneAvailability) {\n      tabs.splice(3);\n    }\n\n    const SelectedComponent = tabs[tab].component;\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\">Ray Dashboard</Typography>\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tab}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n        <LastUpdated />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Dashboard));\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { dashboardReducer } from \"./pages/dashboard/state\";\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardReducer,\n  },\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport type StoreState = ReturnType<typeof store.getState>;\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport { store } from \"./store\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <CssBaseline />\n          <Route component={Dashboard} exact path=\"/\" />\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}